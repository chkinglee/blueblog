///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package article_repo

import (
	"blueblog/internal/pkg/db"
	"fmt"
	"time"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Article {
	return new(Article)
}

func NewQueryBuilder() *articleRepoQueryBuilder {
	return new(articleRepoQueryBuilder)
}

func (t *Article) Create(db *gorm.DB) (id string, err error) {
	if err = db.Create(t).Error; err != nil {
		return "0", errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type articleRepoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *articleRepoQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *articleRepoQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&Article{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *articleRepoQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&Article{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *articleRepoQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&Article{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *articleRepoQueryBuilder) First(db *gorm.DB) (*Article, error) {
	ret := &Article{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *articleRepoQueryBuilder) QueryOne(db *gorm.DB) (*Article, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *articleRepoQueryBuilder) QueryAll(db *gorm.DB) ([]*Article, error) {
	var ret []*Article
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *articleRepoQueryBuilder) Limit(limit int) *articleRepoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *articleRepoQueryBuilder) Offset(offset int) *articleRepoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *articleRepoQueryBuilder) WhereId(p db.Predicate, value string) *articleRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *articleRepoQueryBuilder) WhereIdIn(value []string) *articleRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *articleRepoQueryBuilder) WhereIdNotIn(value []string) *articleRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *articleRepoQueryBuilder) OrderById(asc bool) *articleRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *articleRepoQueryBuilder) WhereUid(p db.Predicate, value string) *articleRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uid", p),
		value,
	})
	return qb
}

func (qb *articleRepoQueryBuilder) WhereUidIn(value []string) *articleRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uid", "IN"),
		value,
	})
	return qb
}

func (qb *articleRepoQueryBuilder) WhereUidNotIn(value []string) *articleRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *articleRepoQueryBuilder) OrderByUid(asc bool) *articleRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "uid "+order)
	return qb
}

func (qb *articleRepoQueryBuilder) WhereTitle(p db.Predicate, value string) *articleRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", p),
		value,
	})
	return qb
}

func (qb *articleRepoQueryBuilder) WhereTitleIn(value []string) *articleRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", "IN"),
		value,
	})
	return qb
}

func (qb *articleRepoQueryBuilder) WhereTitleNotIn(value []string) *articleRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", "NOT IN"),
		value,
	})
	return qb
}

func (qb *articleRepoQueryBuilder) OrderByTitle(asc bool) *articleRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "title "+order)
	return qb
}

func (qb *articleRepoQueryBuilder) WhereContent(p db.Predicate, value string) *articleRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", p),
		value,
	})
	return qb
}

func (qb *articleRepoQueryBuilder) WhereContentIn(value []string) *articleRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", "IN"),
		value,
	})
	return qb
}

func (qb *articleRepoQueryBuilder) WhereContentNotIn(value []string) *articleRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", "NOT IN"),
		value,
	})
	return qb
}

func (qb *articleRepoQueryBuilder) OrderByContent(asc bool) *articleRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "content "+order)
	return qb
}

func (qb *articleRepoQueryBuilder) WhereCreateTime(p db.Predicate, value time.Time) *articleRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", p),
		value,
	})
	return qb
}

func (qb *articleRepoQueryBuilder) WhereCreateTimeIn(value []time.Time) *articleRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "IN"),
		value,
	})
	return qb
}

func (qb *articleRepoQueryBuilder) WhereCreateTimeNotIn(value []time.Time) *articleRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *articleRepoQueryBuilder) OrderByCreateTime(asc bool) *articleRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "create_time "+order)
	return qb
}
